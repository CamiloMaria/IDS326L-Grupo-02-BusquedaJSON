//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\camil\source\repos\ConsoleApp2\ConsoleApp2\busquedaJson.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class busquedaJsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, TEXTO=3, NUMERO=4, PUNTO=5, DOBLEPUNTO=6, WS=7;
	public const int
		RULE_program = 0, RULE_input = 1, RULE_array = 2;
	public static readonly string[] ruleNames = {
		"program", "input", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", null, null, "'.'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "TEXTO", "NUMERO", "PUNTO", "DOBLEPUNTO", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "busquedaJson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static busquedaJsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public busquedaJsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public busquedaJsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbusquedaJsonVisitor<TResult> typedVisitor = visitor as IbusquedaJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6;
				input();
				}
				}
				State = 9;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO() { return GetToken(busquedaJsonParser.TEXTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(busquedaJsonParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbusquedaJsonVisitor<TResult> typedVisitor = visitor as IbusquedaJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 2, RULE_input);
		int _la;
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11;
				Match(TEXTO);
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUNTO) {
					{
					State = 12;
					Match(PUNTO);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				Match(TEXTO);
				State = 16;
				array();
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUNTO) {
					{
					State = 17;
					Match(PUNTO);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOBLEPUNTO() { return GetToken(busquedaJsonParser.DOBLEPUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERO() { return GetToken(busquedaJsonParser.NUMERO, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbusquedaJsonVisitor<TResult> typedVisitor = visitor as IbusquedaJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 4, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(DOBLEPUNTO);
			State = 23;
			Match(T__0);
			State = 24;
			Match(NUMERO);
			State = 25;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '\x1E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x6', '\x2', '\n', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\v', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x10', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x15', '\n', '\x3', '\x5', '\x3', '\x17', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', 
		'\x2', '\x2', '\x1E', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x6', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\n', '\x5', '\x4', '\x3', '\x2', '\t', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\v', '\x3', '\x2', '\x2', '\x2', '\v', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\f', '\x3', '\x2', '\x2', '\x2', '\f', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\xF', '\a', '\x5', '\x2', '\x2', '\xE', 
		'\x10', '\a', '\a', '\x2', '\x2', '\xF', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x10', '\x3', '\x2', '\x2', '\x2', '\x10', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x12', '\a', '\x5', '\x2', '\x2', '\x12', '\x14', 
		'\x5', '\x6', '\x4', '\x2', '\x13', '\x15', '\a', '\a', '\x2', '\x2', 
		'\x14', '\x13', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x17', '\x3', '\x2', '\x2', '\x2', '\x16', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x5', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\b', 
		'\x2', '\x2', '\x19', '\x1A', '\a', '\x3', '\x2', '\x2', '\x1A', '\x1B', 
		'\a', '\x6', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x4', '\x2', '\x2', 
		'\x1C', '\a', '\x3', '\x2', '\x2', '\x2', '\x6', '\v', '\xF', '\x14', 
		'\x16',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
